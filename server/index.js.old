const keys = require('./keys');

//Express App
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(bodyParser.json());

let pgClient = null;
let redisClient = null;
let redisPublisher = null;

// give time to postgres to init the db, otherwise there will be connection refuse error
async function waitForPG() {
    console.log('waiting for pg to come up ...');
    await new Promise(r => setTimeout(r, 5000));
}

async function setupPGConnection() {
    await waitForPG();
    // Postgres client setup
    const { Pool } = require('pg');
    pgClient = new Pool({
        user: keys.pgUser,
        host: keys.pgHost,
        database: keys.pgDatabase,
        password: keys.pgPass,
        port: keys.pgPort
    });

    pgClient.on('error', () => {console.log('Lost PG Connection!');});

    pgClient
        .query('CREATE TABLE IF NOT EXISTS values (number INT)')
        .catch(err => console.log(err));
}

function setupRedisClient(){
    // Redis client setup
    const redis = require('redis');
    redisClient = redis.createClient({
        host: keys.redisHost,
        port: keys.redisPort,
        retry_strategy: () => 1000
    });

    redisPublisher = redisClient.duplicate();
}

// Express Route Handlers
app.get('/', (req, res) => {
    res.send('hi');
});

app.get('/values/all', async (req, res) => {
    const values = pgClient.query('SELECT * from values');
    res.send(values.rows);
});

app.get('/values/current', async (req, res) => {
    console.log('handling /values/current');
    redisClient.hgetall('values', (err, values) =>{
        res.send(values);
    });
});


app.post('/values', async (req, res) => {
    console.log('handling post /values', req.body);
    const index = req.body.index;
    if (parseInt(index) > 40) {
        res.status(422).send('Index too high');
    }

    redisClient.hset('values', index, 'Nothing yet!');
    redisPublisher.publish('insert', index);

    pgClient.query('INSERT INTO values(number) VALUES($1)', [index]);
    res.send({working: true});
});

setupPGConnection();
setupRedisClient();

app.listen(5000, err =>{
    console.log('Listenting ...');
});
